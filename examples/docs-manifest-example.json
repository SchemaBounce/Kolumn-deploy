{
  "version": "1.0.0",
  "generated_at": "2025-01-09T15:30:45Z",
  "kolumn_version": "1.0.0",
  "root_command": {
    "name": "kolumn",
    "use": "kolumn",
    "short": "Terraform-style SQL schema management",
    "long": "Kolumn is a Terraform-style tool for managing database schemas using HCL configuration.",
    "path": "kolumn",
    "has_subcommands": true,
    "is_runnable": false,
    "extracted_at": "2025-01-09T15:30:45Z",
    "subcommands": [
      {
        "name": "apply",
        "use": "apply [options]",
        "short": "Apply changes to match the configuration",
        "long": "Applies the changes required to reach the desired state of the configuration.\n\nThis command applies the changes described in the plan. It supports both HCL (.kl) and traditional configuration files (.yaml, .json).",
        "example": "  # Apply changes with interactive approval\n  kolumn apply\n\n  # Apply changes automatically without approval\n  kolumn apply --auto-approve\n\n  # Apply from a specific plan file\n  kolumn apply --plan=my-plan.tfplan\n\n  # Apply with custom configuration file\n  kolumn apply --config=production.kl\n\n  # Apply with variable files\n  kolumn apply --var-file=prod.klvars --var-file=secrets.klvars",
        "category": "core",
        "tags": ["terraform", "apply", "execution", "state"],
        "since_version": "1.0.0",
        "requires_project": true,
        "requires_auth": false,
        "modifies_state": true,
        "network_access": true,
        "safe_mode": false,
        "see_also": ["kolumn plan", "kolumn destroy", "kolumn state"],
        "prerequisites": ["kolumn init", "kolumn plan"],
        "related_commands": ["kolumn plan", "kolumn validate", "kolumn state"],
        "notes": [
          "Always run 'kolumn plan' first to review changes",
          "Use --auto-approve for CI/CD automation",
          "Supports rollback via state management"
        ],
        "warnings": [
          "This command modifies infrastructure",
          "Changes are permanent unless rolled back"
        ],
        "usage_examples": [
          {
            "title": "Example usage of apply",
            "description": "Apply changes with interactive approval",
            "command": "kolumn apply"
          },
          {
            "title": "Example usage of apply",
            "description": "Apply changes automatically without approval",
            "command": "kolumn apply --auto-approve"
          },
          {
            "title": "Example usage of apply",
            "description": "Apply from a specific plan file",
            "command": "kolumn apply --plan=my-plan.tfplan"
          }
        ],
        "flags": [
          {
            "name": "auto-approve",
            "usage": "skip interactive approval",
            "type": "bool",
            "default_value": "false"
          },
          {
            "name": "plan",
            "usage": "path to plan file",
            "type": "string"
          },
          {
            "name": "config",
            "shorthand": "c",
            "usage": "path to configuration file",
            "type": "string"
          },
          {
            "name": "refresh-state",
            "usage": "refresh state file before applying",
            "type": "bool",
            "default_value": "false"
          },
          {
            "name": "data-analysis",
            "usage": "perform data analysis for risky changes",
            "type": "bool",
            "default_value": "true"
          }
        ],
        "path": "kolumn apply",
        "has_subcommands": false,
        "is_runnable": true,
        "extracted_at": "2025-01-09T15:30:45Z"
      },
      {
        "name": "plan",
        "use": "plan [options]",
        "short": "Generate comprehensive execution plan",
        "long": "Generates a comprehensive execution plan showing what actions will be taken to modify the infrastructure to match the configuration.\n\nThis unified plan command combines the best features:\n• Traditional state-aware planning with drift detection\n• Multi-provider coordination and cross-provider dependencies\n• Capability-based provider selection and discovery\n• Enhanced error handling and rollback planning\n• Comprehensive risk analysis and data impact assessment\n• Parallel planning with configurable parallelism\n• Structured output with explanations and metadata\n\nRisk Levels:\n  LOW      - Safe changes (views, procedures, indexes)\n  MEDIUM   - Changes requiring review (constraints, renames)\n  HIGH     - Risky changes (data type conversions, adding NOT NULL)\n  CRITICAL - Destructive changes (drops, data truncation)\n\nChange Categories:\n  NON_MIGRATION     - Can be safely applied without data migration\n  MIGRATION_REQUIRED - Requires careful planning and potential data migration",
        "example": "  # Generate basic execution plan\n  kolumn plan\n\n  # Generate detailed plan with data analysis\n  kolumn plan --detailed --data-analysis\n\n  # Save plan to file for later apply\n  kolumn plan --out=my-plan.tfplan\n\n  # Plan with specific configuration file\n  kolumn plan --config=production.kl\n\n  # Plan with variable files\n  kolumn plan --var-file=prod.klvars --explain",
        "category": "core",
        "tags": ["terraform", "plan", "preview", "analysis"],
        "since_version": "1.0.0",
        "requires_project": true,
        "requires_auth": false,
        "modifies_state": false,
        "network_access": true,
        "safe_mode": true,
        "see_also": ["kolumn apply", "kolumn validate", "kolumn show"],
        "prerequisites": ["kolumn init"],
        "related_commands": ["kolumn apply", "kolumn destroy", "kolumn validate"],
        "notes": [
          "Always review plan output before applying",
          "Plans are saved for later use with --out flag",
          "Supports multi-provider orchestration"
        ],
        "usage_examples": [
          {
            "title": "Example usage of plan",
            "description": "Generate basic execution plan",
            "command": "kolumn plan"
          },
          {
            "title": "Example usage of plan",
            "description": "Generate detailed plan with data analysis",
            "command": "kolumn plan --detailed --data-analysis"
          }
        ],
        "flags": [
          {
            "name": "out",
            "shorthand": "o",
            "usage": "write plan to specified file",
            "type": "string"
          },
          {
            "name": "detailed",
            "usage": "show detailed plan information",
            "type": "bool",
            "default_value": "false"
          },
          {
            "name": "config",
            "shorthand": "c",
            "usage": "path to configuration file",
            "type": "string"
          },
          {
            "name": "data-analysis",
            "usage": "perform risk analysis for data changes",
            "type": "bool",
            "default_value": "true"
          }
        ],
        "path": "kolumn plan",
        "has_subcommands": false,
        "is_runnable": true,
        "extracted_at": "2025-01-09T15:30:45Z"
      },
      {
        "name": "docs",
        "use": "docs",
        "short": "Generate and manage CLI documentation",
        "long": "Generate comprehensive CLI documentation manifests and validate documentation coverage.\n\nThe docs command provides a complete self-documentation system for the Kolumn CLI. It can generate JSON manifests containing all command metadata, validate documentation coverage, and export documentation in various formats.\n\nThis system uses reflection to automatically extract command metadata, ensuring documentation is always in sync with the actual CLI implementation.",
        "example": "  # Generate complete documentation manifest\n  kolumn docs generate\n\n  # Generate with custom output file\n  kolumn docs generate --output docs/cli-manifest.json\n\n  # Validate documentation coverage\n  kolumn docs validate --examples\n\n  # Show documentation version info\n  kolumn docs version",
        "category": "development",
        "tags": ["documentation", "cli", "manifest", "validation"],
        "since_version": "1.0.0",
        "requires_project": false,
        "requires_auth": false,
        "modifies_state": false,
        "network_access": false,
        "safe_mode": true,
        "see_also": ["kolumn version", "kolumn validate"],
        "notes": [
          "Uses reflection to extract command metadata",
          "Always generates up-to-date documentation"
        ],
        "path": "kolumn docs",
        "has_subcommands": true,
        "is_runnable": false,
        "extracted_at": "2025-01-09T15:30:45Z",
        "subcommands": [
          {
            "name": "generate",
            "use": "generate",
            "short": "Generate comprehensive CLI documentation manifest",
            "long": "Generate a comprehensive JSON manifest containing metadata for all CLI commands.\n\nThe generated manifest includes:\n- Complete command hierarchy with metadata\n- Flag and argument documentation\n- Usage examples and descriptions\n- Cross-references and relationships\n- Documentation coverage statistics\n- Version and build information\n\nThe manifest can be used for:\n- API documentation generation\n- CLI help system integration\n- Documentation website generation\n- CI/CD documentation validation\n- External tool integration",
            "example": "  # Generate manifest to default location\n  kolumn docs generate\n\n  # Generate to custom file\n  kolumn docs generate --output docs/cli-docs.json\n\n  # Include hidden commands and full statistics\n  kolumn docs generate --include-hidden --include-stats\n\n  # Generate with markdown summary\n  kolumn docs generate --markdown-summary",
            "category": "development",
            "tags": ["generation", "manifest", "json", "documentation"],
            "since_version": "1.0.0",
            "requires_project": false,
            "requires_auth": false,
            "modifies_state": false,
            "network_access": false,
            "safe_mode": true,
            "see_also": ["kolumn docs validate", "kolumn docs version"],
            "notes": [
              "Output file will be created if it doesn't exist",
              "Overwrites existing files"
            ],
            "flags": [
              {
                "name": "output",
                "shorthand": "o",
                "usage": "Output file for the documentation manifest",
                "type": "string",
                "default_value": "docs.json",
                "env_var": "KOLUMN_DOCS_OUTPUT"
              },
              {
                "name": "format",
                "usage": "Output format (json)",
                "type": "string",
                "default_value": "json",
                "valid_values": ["json"]
              },
              {
                "name": "include-hidden",
                "usage": "Include hidden commands in the manifest",
                "type": "bool",
                "default_value": "false"
              },
              {
                "name": "include-stats",
                "usage": "Include detailed statistics in the manifest",
                "type": "bool",
                "default_value": "true"
              },
              {
                "name": "markdown-summary",
                "usage": "Generate markdown summary alongside JSON manifest",
                "type": "bool",
                "default_value": "false"
              }
            ],
            "path": "kolumn docs generate",
            "has_subcommands": false,
            "is_runnable": true,
            "extracted_at": "2025-01-09T15:30:45Z"
          },
          {
            "name": "validate",
            "use": "validate",
            "short": "Validate CLI documentation coverage and consistency",
            "long": "Validate the completeness and consistency of CLI documentation.\n\nPerforms the following validation checks:\n- Missing short/long descriptions\n- Commands without usage examples\n- Invalid or inconsistent examples\n- Missing command categories\n- Documentation coverage analysis\n- Cross-reference validation\n\nCan optionally fail the command if issues are found, making it suitable for CI/CD documentation quality gates.",
            "example": "  # Basic validation\n  kolumn docs validate\n\n  # Validate with example testing\n  kolumn docs validate --examples\n\n  # Generate validation report\n  kolumn docs validate --report validation-report.json\n\n  # Fail on any validation issues (CI mode)\n  kolumn docs validate --fail-on-issues",
            "category": "validation",
            "tags": ["validation", "quality", "coverage", "ci"],
            "since_version": "1.0.0",
            "requires_project": false,
            "requires_auth": false,
            "modifies_state": false,
            "network_access": false,
            "safe_mode": true,
            "see_also": ["kolumn docs generate", "kolumn validate"],
            "notes": [
              "Use --fail-on-issues for CI/CD integration",
              "Reports validation issues in structured format"
            ],
            "flags": [
              {
                "name": "examples",
                "usage": "Validate command examples for correctness",
                "type": "bool",
                "default_value": "false"
              },
              {
                "name": "report",
                "usage": "Output validation report to file",
                "type": "string"
              },
              {
                "name": "fail-on-issues",
                "usage": "Exit with error code if validation issues found",
                "type": "bool",
                "default_value": "false"
              }
            ],
            "path": "kolumn docs validate",
            "has_subcommands": false,
            "is_runnable": true,
            "extracted_at": "2025-01-09T15:30:45Z"
          },
          {
            "name": "version",
            "use": "version",
            "short": "Show documentation system version information",
            "long": "Display version information for the documentation system.\n\nShows the documentation manifest format version, Kolumn version, and documentation system capabilities.",
            "example": "  # Show documentation version info\n  kolumn docs version",
            "category": "information",
            "tags": ["version", "info"],
            "since_version": "1.0.0",
            "requires_project": false,
            "requires_auth": false,
            "modifies_state": false,
            "network_access": false,
            "safe_mode": true,
            "see_also": ["kolumn version", "kolumn docs generate"],
            "path": "kolumn docs version",
            "has_subcommands": false,
            "is_runnable": true,
            "extracted_at": "2025-01-09T15:30:45Z"
          }
        ]
      }
    ]
  },
  "commands": {
    "kolumn": {
      "name": "kolumn",
      "use": "kolumn",
      "short": "Terraform-style SQL schema management",
      "long": "Kolumn is a Terraform-style tool for managing database schemas using HCL configuration.",
      "path": "kolumn",
      "has_subcommands": true,
      "is_runnable": false,
      "extracted_at": "2025-01-09T15:30:45Z"
    },
    "kolumn apply": {
      "name": "apply",
      "use": "apply [options]",
      "short": "Apply changes to match the configuration",
      "category": "core",
      "tags": ["terraform", "apply", "execution", "state"],
      "requires_project": true,
      "modifies_state": true,
      "network_access": true,
      "path": "kolumn apply",
      "has_subcommands": false,
      "is_runnable": true,
      "extracted_at": "2025-01-09T15:30:45Z"
    },
    "kolumn plan": {
      "name": "plan",
      "use": "plan [options]",
      "short": "Generate comprehensive execution plan",
      "category": "core",
      "tags": ["terraform", "plan", "preview", "analysis"],
      "requires_project": true,
      "modifies_state": false,
      "network_access": true,
      "safe_mode": true,
      "path": "kolumn plan",
      "has_subcommands": false,
      "is_runnable": true,
      "extracted_at": "2025-01-09T15:30:45Z"
    },
    "kolumn docs": {
      "name": "docs",
      "use": "docs",
      "short": "Generate and manage CLI documentation",
      "category": "development",
      "tags": ["documentation", "cli", "manifest", "validation"],
      "requires_project": false,
      "network_access": false,
      "safe_mode": true,
      "path": "kolumn docs",
      "has_subcommands": true,
      "is_runnable": false,
      "extracted_at": "2025-01-09T15:30:45Z"
    },
    "kolumn docs generate": {
      "name": "generate",
      "use": "generate",
      "short": "Generate comprehensive CLI documentation manifest",
      "category": "development",
      "tags": ["generation", "manifest", "json", "documentation"],
      "requires_project": false,
      "safe_mode": true,
      "path": "kolumn docs generate",
      "has_subcommands": false,
      "is_runnable": true,
      "extracted_at": "2025-01-09T15:30:45Z"
    },
    "kolumn docs validate": {
      "name": "validate",
      "use": "validate",
      "short": "Validate CLI documentation coverage and consistency",
      "category": "validation",
      "tags": ["validation", "quality", "coverage", "ci"],
      "requires_project": false,
      "safe_mode": true,
      "path": "kolumn docs validate",
      "has_subcommands": false,
      "is_runnable": true,
      "extracted_at": "2025-01-09T15:30:45Z"
    },
    "kolumn docs version": {
      "name": "version",
      "use": "version",
      "short": "Show documentation system version information",
      "category": "information",
      "tags": ["version", "info"],
      "requires_project": false,
      "safe_mode": true,
      "path": "kolumn docs version",
      "has_subcommands": false,
      "is_runnable": true,
      "extracted_at": "2025-01-09T15:30:45Z"
    }
  },
  "categories": {
    "core": [
      "kolumn apply",
      "kolumn plan"
    ],
    "development": [
      "kolumn docs",
      "kolumn docs generate"
    ],
    "validation": [
      "kolumn docs validate"
    ],
    "information": [
      "kolumn docs version"
    ]
  },
  "statistics": {
    "total_commands": 7,
    "commands_by_category": {
      "core": 2,
      "development": 2,
      "validation": 1,
      "information": 1
    },
    "total_flags": 12,
    "total_examples": 14,
    "coverage_analysis": {
      "commands_with_examples": 6,
      "commands_with_long_desc": 6,
      "commands_with_categories": 6,
      "documentation_coverage": 85.7,
      "example_coverage": 85.7
    }
  }
}