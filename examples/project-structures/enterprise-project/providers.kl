# Enterprise Project - Provider Configuration
# Full enterprise-grade provider setup with version constraints and advanced configurations

# === KOLUMN GOVERNANCE PROVIDER (REQUIRED FIRST) ===
provider "kolumn" {
  # Enterprise governance features
  governance_enabled = true
  audit_logging      = var.enable_audit_logging
  encryption_level   = var.encryption_level

  # Multi-environment configuration
  environment = var.environment
  workspace   = var.workspace

  # Enterprise features
  state_backend = {
    type   = var.state_backend_type
    config = var.state_backend_config
  }

  # Policy enforcement
  policy_enforcement = var.enable_policy_enforcement
  policy_directory   = "./data/policies"

  # Cross-provider coordination
  provider_coordination = {
    enabled             = true
    conflict_resolution = "governance_first"
  }

  # Version constraints for all managed providers
  required_provider_versions = var.provider_version_constraints
}

# === PRIMARY DATABASE PROVIDERS ===
provider "postgres" {
  version = "~> 2.1"

  host     = var.postgres_config.host
  port     = var.postgres_config.port
  database = var.postgres_config.database
  username = var.postgres_config.username
  password = var.postgres_config.password

  # Environment-specific connection settings
  ssl_mode           = var.environment == "production" ? "require" : "prefer"
  max_connections    = var.postgres_config.max_connections
  connection_timeout = var.postgres_config.timeout

  # Enterprise connection pooling
  connection_pool = {
    enabled         = var.environment != "development"
    min_connections = var.postgres_config.pool_min
    max_connections = var.postgres_config.pool_max
  }

  # Backup and recovery settings
  backup_retention_days  = var.postgres_config.backup_retention
  point_in_time_recovery = var.environment == "production"
}

provider "snowflake" {
  version = ">= 1.5.0, < 2.0"

  account   = var.snowflake_config.account
  username  = var.snowflake_config.username
  password  = var.snowflake_config.password
  warehouse = var.snowflake_config.warehouse
  database  = var.snowflake_config.database
  schema    = var.snowflake_config.default_schema
  role      = var.snowflake_config.role

  # Enterprise Snowflake settings
  session_parameters = {
    QUERY_TIMEOUT = var.snowflake_config.query_timeout
    TIMEZONE      = var.timezone
    WEEK_START    = 1 # Monday
  }

  # Cost management
  auto_suspend_minutes = var.snowflake_config.auto_suspend
  auto_resume          = true
}

# === STREAMING AND MESSAGING ===
provider "kafka" {
  version = "^3.2"

  brokers = var.kafka_config.brokers

  # Security configuration based on environment
  security_protocol = var.kafka_config.security_protocol
  sasl_mechanism    = var.kafka_config.sasl_mechanism
  sasl_username     = var.kafka_config.username
  sasl_password     = var.kafka_config.password

  # SSL configuration for production
  ssl_ca_location   = var.environment == "production" ? var.kafka_config.ssl_ca_cert : null
  ssl_cert_location = var.environment == "production" ? var.kafka_config.ssl_cert : null
  ssl_key_location  = var.environment == "production" ? var.kafka_config.ssl_key : null

  # Schema Registry integration
  schema_registry_url = var.kafka_config.schema_registry_url
  schema_registry_auth = {
    username = var.kafka_config.schema_registry_username
    password = var.kafka_config.schema_registry_password
  }

  # Producer/Consumer defaults
  producer_config = {
    acks             = var.environment == "production" ? "all" : "1"
    retries          = var.environment == "production" ? 2147483647 : 10
    compression_type = "lz4"
  }

  consumer_config = {
    auto_offset_reset  = "earliest"
    enable_auto_commit = false
  }
}

# === NOSQL AND DOCUMENT STORES ===
provider "mongodb" {
  version = "~> 1.8"

  connection_string = var.mongodb_config.connection_string
  database          = var.mongodb_config.database

  # Replica set configuration
  replica_set     = var.mongodb_config.replica_set
  read_preference = var.mongodb_config.read_preference
  write_concern   = var.mongodb_config.write_concern

  # Connection pool settings
  max_pool_size = var.mongodb_config.max_pool_size
  min_pool_size = var.mongodb_config.min_pool_size

  # Authentication and security
  auth_source = var.mongodb_config.auth_source
  tls_enabled = var.environment != "development"
  tls_ca_file = var.environment == "production" ? var.mongodb_config.tls_ca_file : null
}

# === CLOUD STORAGE ===
provider "s3" {
  version = ">= 4.0, < 6.0"

  region     = var.aws_config.region
  access_key = var.aws_config.access_key
  secret_key = var.aws_config.secret_key

  # Enterprise AWS settings
  assume_role = var.aws_config.assume_role_arn != null ? {
    role_arn     = var.aws_config.assume_role_arn
    session_name = "kolumn-${var.environment}-${var.workspace}"
  } : null

  # Default encryption for all S3 operations
  default_encryption = {
    algorithm  = "aws:kms"
    kms_key_id = var.aws_config.kms_key_id
  }

  # Cross-region replication settings
  replication_config = var.environment == "production" ? {
    enabled            = true
    destination_region = var.aws_config.backup_region
  } : null
}

provider "azure_storage" {
  version = "~> 3.0"

  account_name = var.azure_config.storage_account_name
  account_key  = var.azure_config.storage_account_key

  # Multi-cloud strategy configuration
  enabled = var.multi_cloud_enabled

  # Azure-specific enterprise settings
  environment = var.azure_config.environment # AzurePublicCloud, AzureUSGovernmentCloud
  tenant_id   = var.azure_config.tenant_id

  # Storage redundancy
  replication_type = var.azure_config.replication_type # LRS, GRS, RAGRS, ZRS
}

# === CACHING AND IN-MEMORY ===
provider "redis" {
  version = "~> 2.5"

  host     = var.redis_config.host
  port     = var.redis_config.port
  password = var.redis_config.password
  db       = var.redis_config.database

  # Redis cluster configuration
  cluster_enabled = var.redis_config.cluster_enabled
  cluster_nodes   = var.redis_config.cluster_nodes

  # Connection settings
  pool_size    = var.redis_config.pool_size
  dial_timeout = var.redis_config.dial_timeout
  read_timeout = var.redis_config.read_timeout

  # SSL/TLS for production
  tls_enabled = var.environment == "production"
  tls_config = var.environment == "production" ? {
    ca_cert   = var.redis_config.tls_ca_cert
    cert_file = var.redis_config.tls_cert_file
    key_file  = var.redis_config.tls_key_file
  } : null
}

# === SEARCH AND ANALYTICS ===
provider "elasticsearch" {
  version = ">= 7.0, < 9.0"

  urls     = var.elasticsearch_config.urls
  username = var.elasticsearch_config.username
  password = var.elasticsearch_config.password

  # Elasticsearch cluster settings
  cloud_id = var.elasticsearch_config.cloud_id
  api_key  = var.elasticsearch_config.api_key

  # Index management
  default_index_settings = {
    number_of_shards   = var.elasticsearch_config.default_shards
    number_of_replicas = var.elasticsearch_config.default_replicas
    refresh_interval   = var.elasticsearch_config.refresh_interval
  }

  # Snapshot repository for backups
  snapshot_repository = var.environment == "production" ? {
    name = "kolumn-backups-${var.environment}"
    type = "s3"
    settings = {
      bucket   = var.elasticsearch_config.snapshot_bucket
      region   = var.aws_config.region
      role_arn = var.aws_config.elasticsearch_role_arn
    }
  } : null
}

# === ORCHESTRATION AND WORKFLOW ===
provider "airflow" {
  version = "~> 1.2"

  host     = var.airflow_config.host
  port     = var.airflow_config.port
  username = var.airflow_config.username
  password = var.airflow_config.password

  # Airflow configuration
  base_url = var.airflow_config.base_url

  # DAG deployment settings
  dag_deployment = {
    enabled       = true
    repository    = var.airflow_config.dag_repository
    branch        = var.airflow_config.dag_branch
    sync_interval = var.airflow_config.sync_interval
  }

  # Connection management
  manage_connections = true
  connection_prefix  = "kolumn_${var.environment}_"
}