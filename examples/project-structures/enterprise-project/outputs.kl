# Enterprise Project - Output Configuration
# Comprehensive enterprise outputs for integration, monitoring, and management

# === ENVIRONMENT INFORMATION ===

output "environment_info" {
  description = "Comprehensive environment configuration information"
  value = {
    environment      = var.environment
    workspace        = var.workspace
    project_name     = var.project_name
    organization     = var.organization
    team             = var.team
    cost_center      = var.cost_center
    compliance_level = var.compliance_level
    encryption_level = var.encryption_level
    timezone         = var.timezone
    deployed_at      = timestamp()
  }
}

output "feature_flags" {
  description = "Current feature flag configuration"
  value       = var.feature_flags
}

output "governance_settings" {
  description = "Enterprise governance configuration"
  value = {
    audit_logging_enabled      = var.enable_audit_logging
    policy_enforcement_enabled = var.enable_policy_enforcement
    data_retention_policy      = var.data_retention_policy
    encryption_level           = var.encryption_level
    compliance_level           = var.compliance_level
  }
}

# === DATA-CENTRIC MODULE OUTPUTS (AUTO-DISCOVERED MODULES) ===

output "data_warehouse" {
  description = "Data warehouse module outputs from auto-discovered modules/data-warehouse"
  value = {
    analytics_database    = module.data_warehouse.analytics_database
    data_warehouse_tables = module.data_warehouse.data_warehouse_tables
    analytical_views      = module.data_warehouse.analytical_views
    automation_tasks      = module.data_warehouse.automation_tasks
  }
}

output "streaming" {
  description = "Streaming platform module outputs from auto-discovered modules/streaming"
  value = {
    streaming_topics         = module.streaming.streaming_topics
    streaming_applications   = module.streaming.streaming_applications
    data_connectors          = module.streaming.data_connectors
    schema_registry_subjects = module.streaming.schema_registry_subjects
  }
}

output "governance" {
  description = "Data governance module outputs from auto-discovered modules/governance"
  value = {
    data_classifications   = module.governance.data_classifications
    universal_data_objects = module.governance.universal_data_objects
    rbac_roles             = module.governance.rbac_roles
    governance_policies    = module.governance.governance_policies
  }
}

# === DATABASE OUTPUTS ===

output "postgresql_cluster" {
  description = "PostgreSQL cluster connection and configuration information"
  value = {
    cluster_identifier           = postgres_cluster.analytical_database.cluster_identifier
    endpoint                     = postgres_cluster.analytical_database.endpoint
    port                         = postgres_cluster.analytical_database.port
    database_name                = postgres_cluster.analytical_database.database_name
    multi_az                     = postgres_cluster.analytical_database.multi_az
    backup_retention_period      = postgres_cluster.analytical_database.backup_retention_period
    storage_size_gb              = postgres_cluster.analytical_database.allocated_storage
    instance_class               = postgres_cluster.analytical_database.instance_class
    performance_insights_enabled = postgres_cluster.analytical_database.performance_insights_enabled
  }
  sensitive = true # Contains connection information
}

output "snowflake_warehouse" {
  description = "Snowflake warehouse configuration and connection details"
  value = {
    warehouse_name       = snowflake_warehouse.enterprise_warehouse.name
    warehouse_size       = snowflake_warehouse.enterprise_warehouse.warehouse_size
    auto_suspend_minutes = snowflake_warehouse.enterprise_warehouse.auto_suspend
    min_cluster_count    = snowflake_warehouse.enterprise_warehouse.min_cluster_count
    max_cluster_count    = snowflake_warehouse.enterprise_warehouse.max_cluster_count
    scaling_policy       = snowflake_warehouse.enterprise_warehouse.scaling_policy

    # Connection information
    connection_info = {
      account   = var.snowflake_config.account
      warehouse = snowflake_warehouse.enterprise_warehouse.name
      database  = var.snowflake_config.database
      role      = var.snowflake_config.role
    }
  }
  sensitive = true # Contains account information
}

output "mongodb_cluster" {
  description = "MongoDB Atlas cluster information and connection details"
  value = {
    cluster_name           = mongodb_atlas_cluster.document_platform.name
    cluster_type           = mongodb_atlas_cluster.document_platform.cluster_type
    provider_instance_size = mongodb_atlas_cluster.document_platform.provider_instance_size_name
    num_shards             = mongodb_atlas_cluster.document_platform.replication_specs[0].num_shards
    backup_enabled         = mongodb_atlas_cluster.document_platform.provider_backup_enabled
    encryption_at_rest     = mongodb_atlas_cluster.document_platform.encryption_at_rest_provider
    auto_scaling_enabled   = mongodb_atlas_cluster.document_platform.auto_scaling_disk_gb_enabled
  }
  sensitive = true # Contains cluster configuration details
}

# === STREAMING PLATFORM OUTPUTS ===

output "kafka_cluster" {
  description = "Enterprise Kafka cluster configuration and endpoints"
  value = {
    cluster_name                 = kafka_cluster.streaming_platform.cluster_name
    bootstrap_brokers            = kafka_cluster.streaming_platform.bootstrap_brokers
    bootstrap_brokers_sasl_scram = kafka_cluster.streaming_platform.bootstrap_brokers_sasl_scram
    bootstrap_brokers_tls        = kafka_cluster.streaming_platform.bootstrap_brokers_tls

    cluster_configuration = {
      num_brokers           = kafka_cluster.streaming_platform.num_brokers
      broker_instance_type  = kafka_cluster.streaming_platform.broker_instance_type
      storage_per_broker    = kafka_cluster.streaming_platform.storage_per_broker
      encryption_in_transit = kafka_cluster.streaming_platform.encryption_in_transit
      encryption_at_rest    = kafka_cluster.streaming_platform.encryption_at_rest
    }

    monitoring_endpoints = {
      prometheus_jmx_exporter = kafka_cluster.streaming_platform.open_monitoring[0].prometheus[0].jmx_exporter[0].enabled_in_broker
      cloudwatch_logs_enabled = kafka_cluster.streaming_platform.logging_info[0].broker_logs[0].cloudwatch_logs[0].enabled
    }
  }
  sensitive = true # Contains connection endpoints
}

# === DATA LAKE OUTPUTS ===

output "data_lake" {
  description = "Enterprise data lake S3 bucket information and configuration"
  value = {
    bucket_name = s3_bucket.enterprise_data_lake.name
    bucket_arn  = s3_bucket.enterprise_data_lake.arn
    region      = s3_bucket.enterprise_data_lake.region

    configuration = {
      versioning_enabled      = s3_bucket.enterprise_data_lake.versioning[0].enabled
      encryption_algorithm    = s3_bucket.enterprise_data_lake.server_side_encryption_configuration[0].rule[0].apply_server_side_encryption_by_default[0].sse_algorithm
      lifecycle_rules_enabled = length(s3_bucket.enterprise_data_lake.lifecycle_configuration[0].rules) > 0
      replication_enabled     = var.backup_config.enable_cross_region_backup
      public_access_blocked   = true
    }

    access_patterns = {
      standard_to_ia_days          = s3_bucket.enterprise_data_lake.lifecycle_configuration[0].rules[0].transition[0].days
      ia_to_glacier_days           = s3_bucket.enterprise_data_lake.lifecycle_configuration[0].rules[0].transition[1].days
      glacier_to_deep_archive_days = s3_bucket.enterprise_data_lake.lifecycle_configuration[0].rules[0].transition[2].days
      expiration_days              = s3_bucket.enterprise_data_lake.lifecycle_configuration[0].rules[0].expiration[0].days
    }
  }
}

# === PROVIDER VERSION INFORMATION ===

output "provider_versions" {
  description = "Deployed provider versions for compatibility tracking"
  value       = var.provider_version_constraints
}

# === SCALING CONFIGURATION OUTPUTS ===

output "scaling_configuration" {
  description = "Current auto-scaling configuration across all services"
  value = {
    global_scaling_config = var.scaling_config

    service_scaling = {
      postgresql = {
        instance_class = postgres_cluster.analytical_database.instance_class
        multi_az       = postgres_cluster.analytical_database.multi_az
      }
      snowflake = {
        min_cluster_count   = snowflake_warehouse.enterprise_warehouse.min_cluster_count
        max_cluster_count   = snowflake_warehouse.enterprise_warehouse.max_cluster_count
        auto_scaling_policy = snowflake_warehouse.enterprise_warehouse.scaling_policy
      }
      kafka = {
        num_brokers          = kafka_cluster.streaming_platform.num_brokers
        broker_instance_type = kafka_cluster.streaming_platform.broker_instance_type
      }
      mongodb = {
        auto_scaling_enabled = mongodb_atlas_cluster.document_platform.auto_scaling_disk_gb_enabled
        instance_size        = mongodb_atlas_cluster.document_platform.provider_instance_size_name
      }
    }
  }
}

# === BACKUP AND DISASTER RECOVERY ===

output "backup_configuration" {
  description = "Enterprise backup and disaster recovery configuration"
  value = {
    global_backup_config = var.backup_config

    service_backup_status = {
      postgresql = {
        backup_retention_days  = postgres_cluster.analytical_database.backup_retention_period
        backup_window          = postgres_cluster.analytical_database.backup_window
        maintenance_window     = postgres_cluster.analytical_database.maintenance_window
        point_in_time_recovery = true
      }
      s3_data_lake = {
        versioning_enabled       = s3_bucket.enterprise_data_lake.versioning[0].enabled
        cross_region_replication = var.backup_config.enable_cross_region_backup
        lifecycle_management     = true
      }
      mongodb = {
        backup_enabled = mongodb_atlas_cluster.document_platform.provider_backup_enabled
        retention_days = var.backup_config.backup_retention_days
      }
    }

    disaster_recovery = {
      primary_region = var.aws_config.region
      dr_region      = var.backup_config.disaster_recovery_region
      rto_minutes    = var.backup_config.rto_minutes
      rpo_minutes    = var.backup_config.rpo_minutes
    }
  }
}

# === COST MANAGEMENT OUTPUTS ===

output "cost_management" {
  description = "Cost management and optimization configuration"
  value = {
    cost_center      = var.cost_center
    environment_tier = var.environment

    cost_optimization_features = {
      s3_lifecycle_enabled            = true
      snowflake_auto_suspend          = var.snowflake_config.auto_suspend
      kafka_instance_right_sizing     = true
      postgresql_performance_insights = postgres_cluster.analytical_database.performance_insights_enabled
    }

    estimated_monthly_costs = {
      environment_multiplier = var.environment == "production" ? 1.0 : var.environment == "staging" ? 0.3 : 0.1
      notes                  = "Actual costs depend on usage patterns and data volumes"
    }
  }
}

# === SECURITY COMPLIANCE OUTPUTS ===

output "security_compliance" {
  description = "Security and compliance status across the enterprise platform"
  value = {
    compliance_level = var.compliance_level
    encryption_status = {
      at_rest        = var.encryption_level
      in_transit     = true
      key_management = "enterprise_managed"
    }

    audit_capabilities = {
      audit_logging_enabled  = var.enable_audit_logging
      access_logging_enabled = true
      performance_monitoring = true
      security_monitoring    = var.security_config.enable_intrusion_detection
    }

    network_security = {
      vpc_isolation              = true
      private_subnets            = true
      security_groups_configured = true
      waf_enabled                = var.security_config.enable_waf
      ddos_protection            = var.security_config.enable_ddos_protection
    }

    data_protection = {
      backup_enabled                = true
      versioning_enabled            = var.environment == "production"
      cross_region_replication      = var.backup_config.enable_cross_region_backup
      retention_policies_configured = true
    }
  }
}

# === OPERATIONAL DASHBOARDS ===

output "operational_dashboards" {
  description = "URLs and endpoints for operational monitoring and management"
  value = {
    monitoring_dashboards = {
      grafana_url          = module.monitoring.grafana_url
      prometheus_url       = module.monitoring.prometheus_endpoint
      elasticsearch_kibana = "${module.monitoring.elasticsearch_endpoint}/_plugin/kibana/"
    }

    cloud_consoles = {
      aws_region    = var.aws_config.region
      snowflake_url = "https://${var.snowflake_config.account}.snowflakecomputing.com"
      mongodb_atlas = "https://cloud.mongodb.com"
    }

    management_endpoints = {
      kafka_cluster_arn      = kafka_cluster.streaming_platform.arn
      rds_cluster_identifier = postgres_cluster.analytical_database.cluster_identifier
      s3_console_url         = "https://s3.console.aws.amazon.com/s3/buckets/${s3_bucket.enterprise_data_lake.name}"
    }
  }
  sensitive = true # Contains management URLs and identifiers
}