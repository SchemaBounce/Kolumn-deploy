# Data Platform - Output Configuration
# Comprehensive outputs for data platform integration and monitoring

# === DATABASE CONNECTION OUTPUTS ===

output "postgres_connection_info" {
  description = "PostgreSQL analytical database connection details"
  value = {
    host     = var.postgres_host
    port     = var.postgres_port
    database = var.postgres_database
    username = var.postgres_username
    # Note: password not exposed for security
    schema   = postgres_table.customers.config.schema
    ssl_mode = "require"
  }
}

output "snowflake_connection_info" {
  description = "Snowflake data warehouse connection details"
  value = {
    account   = var.snowflake_account
    warehouse = var.snowflake_warehouse
    database  = var.snowflake_database
    schema    = "ANALYTICS"
    role      = var.snowflake_role
  }
}

output "mongodb_connection_info" {
  description = "MongoDB document store connection details"
  value = {
    database    = var.mongodb_database
    replica_set = var.mongodb_replica_set
    # Connection string not exposed for security
  }
  sensitive = true
}

# === DATA OBJECT OUTPUTS ===

output "customer_data_object_info" {
  description = "Universal customer data object schema and governance"
  value = {
    name = kolumn_data_object.customer.name
    columns = {
      for column_name, column_def in kolumn_data_object.customer.columns :
      column_name => {
        type = column_def.type
        classifications = [
          for classification in column_def.classifications :
          classification.name
        ]
        encrypted = contains([
          for classification in column_def.classifications :
          classification.requirements.encryption
        ], true)
      }
    }
    provider_configs = kolumn_data_object.customer.config
  }
}

output "transaction_data_object_info" {
  description = "Universal transaction data object schema and governance"
  value = {
    name = kolumn_data_object.transaction.name
    columns = {
      for column_name, column_def in kolumn_data_object.transaction.columns :
      column_name => {
        type = column_def.type
        classifications = [
          for classification in column_def.classifications :
          classification.name
        ]
        financial_data = contains([
          for classification in column_def.classifications :
          classification.name
        ], "FINANCIAL")
      }
    }
    provider_configs = kolumn_data_object.transaction.config
  }
}

# === GOVERNANCE OUTPUTS ===

output "data_classifications" {
  description = "All data classifications and their requirements"
  value = {
    pii = {
      name                = kolumn_classification.pii.name
      encryption_required = kolumn_classification.pii.requirements.encryption
      audit_required      = kolumn_classification.pii.requirements.audit_access
      retention_days      = kolumn_classification.pii.requirements.retention_days
    }
    financial = {
      name                = kolumn_classification.financial.name
      encryption_required = kolumn_classification.financial.requirements.encryption
      compliance_tags     = kolumn_classification.financial.requirements.compliance_tags
      retention_days      = kolumn_classification.financial.requirements.retention_days
    }
    internal = {
      name                = kolumn_classification.internal.name
      encryption_required = kolumn_classification.internal.requirements.encryption
      retention_days      = kolumn_classification.internal.requirements.retention_days
    }
    public = {
      name                = kolumn_classification.public.name
      encryption_required = kolumn_classification.public.requirements.encryption
      retention_days      = kolumn_classification.public.requirements.retention_days
    }
  }
}

output "rbac_roles" {
  description = "Role-based access control configuration"
  value = {
    data_scientist = {
      name          = kolumn_role.data_scientist.name
      description   = kolumn_role.data_scientist.description
      max_queries   = kolumn_role.data_scientist.capabilities.max_concurrent_queries
      query_timeout = kolumn_role.data_scientist.capabilities.query_timeout_minutes
    }
    financial_analyst = {
      name          = kolumn_role.financial_analyst.name
      description   = kolumn_role.financial_analyst.description
      max_queries   = kolumn_role.financial_analyst.capabilities.max_concurrent_queries
      query_timeout = kolumn_role.financial_analyst.capabilities.query_timeout_minutes
    }
    data_engineer = {
      name         = kolumn_role.data_engineer.name
      description  = kolumn_role.data_engineer.description
      admin_access = kolumn_role.data_engineer.capabilities.admin_operations
    }
  }
}

# === STREAMING OUTPUTS ===

output "kafka_topics" {
  description = "Kafka topics and their configurations"
  value = {
    customer_events = {
      name            = kafka_topic.customer_events.name
      partitions      = kafka_topic.customer_events.partitions
      retention_hours = kafka_topic.customer_events.config["retention.ms"] / (1000 * 60 * 60)
    }
    transaction_events = {
      name            = kafka_topic.transaction_events.name
      partitions      = kafka_topic.transaction_events.partitions
      retention_hours = kafka_topic.transaction_events.config["retention.ms"] / (1000 * 60 * 60)
    }
    audit_logs = {
      name           = kafka_topic.audit_logs.name
      partitions     = kafka_topic.audit_logs.partitions
      retention_days = kafka_topic.audit_logs.config["retention.ms"] / (1000 * 60 * 60 * 24)
    }
  }
}

output "schema_registry_subjects" {
  description = "Schema Registry subjects and compatibility"
  value = {
    customer_events = {
      subject       = schema_registry_subject.customer_events_value.subject
      compatibility = schema_registry_subject.customer_events_value.compatibility_level
    }
    transaction_events = {
      subject       = schema_registry_subject.transaction_events_value.subject
      compatibility = schema_registry_subject.transaction_events_value.compatibility_level
    }
  }
}

# === STORAGE OUTPUTS ===

output "data_lake_buckets" {
  description = "S3 data lake bucket information"
  value = {
    raw_data = {
      name              = s3_bucket.raw_data_lake.name
      region            = s3_bucket.raw_data_lake.region
      encryption        = "aws:kms"
      lifecycle_enabled = true
    }
    curated_data = {
      name       = s3_bucket.curated_data_lake.name
      region     = s3_bucket.curated_data_lake.region
      encryption = "aws:kms"
      versioning = s3_bucket.curated_data_lake.versioning.enabled
    }
  }
}

# === TABLE OUTPUTS ===

output "postgres_tables" {
  description = "PostgreSQL analytical tables"
  value = {
    customers = {
      name        = postgres_table.customers.name
      schema      = postgres_table.customers.config.schema
      partitioned = postgres_table.customers.config.partition_by != null
      rls_enabled = postgres_table.customers.row_level_security.enabled
    }
    transactions = {
      name               = postgres_table.transactions.name
      schema             = postgres_table.transactions.config.schema
      partitioned        = postgres_table.transactions.partitioning.type != null
      partition_interval = postgres_table.transactions.partitioning.interval
    }
  }
}

output "snowflake_tables" {
  description = "Snowflake data warehouse tables"
  value = {
    dim_customers = {
      name           = snowflake_table.dim_customers.name
      database       = snowflake_table.dim_customers.database
      schema         = snowflake_table.dim_customers.schema
      retention_days = snowflake_table.dim_customers.data_retention_time_in_days
    }
    fact_transactions = {
      name           = snowflake_table.fact_transactions.name
      database       = snowflake_table.fact_transactions.database
      schema         = snowflake_table.fact_transactions.schema
      retention_days = snowflake_table.fact_transactions.data_retention_time_in_days
    }
  }
}

output "mongodb_collections" {
  description = "MongoDB document collections"
  value = {
    customer_profiles = {
      name     = mongodb_collection.customer_profiles.name
      database = mongodb_collection.customer_profiles.database
      sharded  = mongodb_collection.customer_profiles.shard_key != null
    }
    transaction_events = {
      name        = mongodb_collection.transaction_events.name
      database    = mongodb_collection.transaction_events.database
      ttl_enabled = true
      ttl_seconds = mongodb_collection.transaction_events.indexes[3].expire_after_seconds
    }
  }
}

# === ENVIRONMENT INFO ===

output "environment_configuration" {
  description = "Current environment and platform settings"
  value = {
    environment         = var.environment
    project_name        = var.project_name
    team_name           = var.team_name
    encryption_level    = var.encryption_level
    audit_logging       = var.enable_audit_logging
    data_retention_days = var.data_retention_days
  }
}

output "platform_endpoints" {
  description = "Data platform service endpoints"
  value = {
    kafka_brokers   = var.kafka_brokers
    schema_registry = var.schema_registry_url
    # Database endpoints not exposed for security
  }
  sensitive = true
}