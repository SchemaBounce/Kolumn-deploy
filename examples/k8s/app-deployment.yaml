# =============================================================================
# KOLUMN FILE DISCOVERY EXAMPLE: Kubernetes YAML with Interpolation
# =============================================================================
#
# PURPOSE: This file demonstrates how Kolumn's File Discovery System can read
# external YAML files and interpolate them with Kolumn resources and variables.
#
# USED BY: /examples/universal-file-processing.kl
# 
# HOW IT WORKS:
# 1. The universal-file-processing.kl example has this discover block:
#
#    discover "kolumn_file" "kubernetes_deployment" {
#      location = "./k8s/app-deployment.yaml"  # <-- This file!
#      inputs = {
#        app_name = "data-processing-service" 
#        environment = var.environment
#        database_secret = kubernetes_secret.database_credentials.name
#        # ... more inputs
#      }
#    }
#
# 2. Kolumn reads this file and replaces all ${input.*} patterns with actual values
# 3. The result is used to create a kubernetes_deployment resource
#
# INTERPOLATION PATTERNS DEMONSTRATED:
# - ${input.app_name} -> Gets replaced with "data-processing-service"
# - ${input.environment} -> Gets replaced with var.environment value
# - ${input.database_secret} -> Gets replaced with actual Kubernetes secret name
#
# =============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${input.app_name}
  labels:
    app: ${input.app_name}
    version: ${input.image_tag}
    environment: ${input.environment}
    managed-by: kolumn
spec:
  replicas: ${input.replicas}
  selector:
    matchLabels:
      app: ${input.app_name}
  template:
    metadata:
      labels:
        app: ${input.app_name}
        version: ${input.image_tag}
        environment: ${input.environment}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        kolumn.io/managed: "true"
        kolumn.io/database-secret: ${input.database_secret}
    spec:
      containers:
      - name: ${input.app_name}
        image: ${input.app_name}:${input.image_tag}
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "${input.environment}"
        - name: APP_NAME
          value: "${input.app_name}"
        - name: IMAGE_VERSION
          value: "${input.image_tag}"
        # Database configuration from Kolumn secrets
        - name: DATABASE_HOST
          valueFrom:
            secretKeyRef:
              name: ${input.database_secret}
              key: host
        - name: DATABASE_PORT
          valueFrom:
            secretKeyRef:
              name: ${input.database_secret}
              key: port
        - name: DATABASE_NAME
          valueFrom:
            secretKeyRef:
              name: ${input.database_secret}
              key: database
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: ${input.database_secret}
              key: username
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ${input.database_secret}
              key: password
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: ${input.app_name}-config
      imagePullSecrets:
      - name: registry-secret
---
apiVersion: v1
kind: Service
metadata:
  name: ${input.app_name}
  labels:
    app: ${input.app_name}
    environment: ${input.environment}
spec:
  selector:
    app: ${input.app_name}
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  type: ClusterIP
---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${input.app_name}-config
  labels:
    app: ${input.app_name}
    environment: ${input.environment}
data:
  app.properties: |
    app.name=${input.app_name}
    app.environment=${input.environment}
    app.version=${input.image_tag}
    app.replicas=${input.replicas}
    
    # Generated by Kolumn file discovery
    kolumn.managed=true
    kolumn.database.secret=${input.database_secret}