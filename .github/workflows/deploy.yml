name: Deploy to Kolumn-deploy

# This workflow should be copied to the schemabounce/Kolumn-deploy repository
# It handles the actual deployment to the public Kolumn-deploy repository
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., 1.2.3)'
        required: true
        type: string
      tag:
        description: 'Git tag (e.g., v1.2.3)'
        required: true
        type: string
      source_repo:
        description: 'Source repository'
        required: true
        type: string
      run_id:
        description: 'Source workflow run ID'
        required: true
        type: string

env:
  DEPLOY_REPO: 'schemabounce/Kolumn-deploy'
  SOURCE_REPO_TOKEN: ${{ secrets.SOURCE_REPO_TOKEN }}
  DEPLOY_REPO_TOKEN: ${{ secrets.DEPLOY_REPO_TOKEN || secrets.SOURCE_REPO_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  deploy:
    name: Deploy Binaries
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    steps:
      - name: Download release packages from private repo
        run: |
          echo "🔽 Downloading release packages from ${{ inputs.source_repo }} run ${{ inputs.run_id }}"
          
          # Debug: Check token availability  
          if [ -z "$SOURCE_REPO_TOKEN" ]; then
            echo "❌ SOURCE_REPO_TOKEN environment variable is empty"
            echo ""
            echo "🔧 To fix this issue:"
            echo "1. Create a Personal Access Token at https://github.com/settings/personal-access-tokens/new"
            echo "2. Grant 'actions:read' and 'contents:read' permissions for SchemaBounce/Kolumn"
            echo "3. Add the token as a repository secret named 'SOURCE_REPO_TOKEN'"
            echo "4. Go to: https://github.com/${{ env.DEPLOY_REPO }}/settings/secrets/actions"
            echo ""
            echo "🔍 Available environment variables:"
            env | grep -E "(TOKEN|GITHUB)" || echo "No token-related variables found"
            exit 1
          else
            echo "✅ SOURCE_REPO_TOKEN is available (length: ${#SOURCE_REPO_TOKEN})"
          fi
          
          # Retry mechanism for artifact availability
          MAX_RETRIES=10
          RETRY_COUNT=0
          ARTIFACT_URL=""
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "🔄 Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES - Checking for artifacts..."
            
            # Get the artifact download URL using GitHub API
            ARTIFACT_RESPONSE=$(curl -s -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $SOURCE_REPO_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/${{ inputs.source_repo }}/actions/runs/${{ inputs.run_id }}/artifacts")
            
            # Check if we got a valid response
            if echo "$ARTIFACT_RESPONSE" | jq -e '.artifacts' > /dev/null 2>&1; then
              ARTIFACT_URL=$(echo "$ARTIFACT_RESPONSE" | jq -r '.artifacts[] | select(.name == "kolumn-release-packages") | .archive_download_url')
              
              if [ "$ARTIFACT_URL" != "null" ] && [ -n "$ARTIFACT_URL" ]; then
                echo "✅ Found artifact URL: $ARTIFACT_URL"
                break
              else
                echo "⏳ Artifact not ready yet. Available artifacts:"
                echo "$ARTIFACT_RESPONSE" | jq -r '.artifacts[].name' || echo "No artifacts found"
              fi
            else
              echo "❌ API Error response:"
              echo "$ARTIFACT_RESPONSE"
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "⏳ Waiting 30 seconds before retry..."
              sleep 30
            fi
          done
          
          if [ "$ARTIFACT_URL" = "null" ] || [ -z "$ARTIFACT_URL" ]; then
            echo "❌ Error: Could not find kolumn-release-packages artifact after $MAX_RETRIES attempts"
            echo "🔍 Final artifacts check:"
            curl -H "Authorization: Bearer $SOURCE_REPO_TOKEN" \
              "https://api.github.com/repos/${{ inputs.source_repo }}/actions/runs/${{ inputs.run_id }}/artifacts"
            exit 1
          fi
          
          echo "📦 Artifact URL: $ARTIFACT_URL"
          
          # Download the artifact with retry
          echo "⬇️ Downloading artifact..."
          MAX_DOWNLOAD_RETRIES=3
          DOWNLOAD_RETRY=0
          
          while [ $DOWNLOAD_RETRY -lt $MAX_DOWNLOAD_RETRIES ]; do
            if curl -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $SOURCE_REPO_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              -o release-packages.zip \
              "$ARTIFACT_URL"; then
              echo "✅ Download successful!"
              break
            else
              DOWNLOAD_RETRY=$((DOWNLOAD_RETRY + 1))
              if [ $DOWNLOAD_RETRY -lt $MAX_DOWNLOAD_RETRIES ]; then
                echo "⏳ Download failed, retrying in 10 seconds..."
                sleep 10
              fi
            fi
          done
          
          if [ $DOWNLOAD_RETRY -eq $MAX_DOWNLOAD_RETRIES ]; then
            echo "❌ Failed to download artifact after $MAX_DOWNLOAD_RETRIES attempts"
            exit 1
          fi
          
          # Extract packages
          echo "📂 Extracting release packages..."
          unzip release-packages.zip
          ls -la
          
          # Show structure of extracted files
          echo "📁 Extracted file structure:"
          find . -name "kolumn-*" -type f | head -20

      - name: Setup deployment environment
        run: |
          git config --global user.name "Kolumn Release Bot"
          git config --global user.email "bot@kolumn.com"

      - name: Clone source repository for examples
        run: |
          # Clone source repository with minimal depth and only fetch examples
          git clone --depth=1 --filter=blob:none --sparse https://$SOURCE_REPO_TOKEN@github.com/${{ inputs.source_repo }}.git source
          cd source
          
          # Configure sparse checkout to ONLY include examples directory
          git sparse-checkout init --cone
          git sparse-checkout set examples
          
          # Verify examples directory exists and has content
          if [ ! -d "examples" ]; then
            echo "❌ Examples directory not found"
            exit 1
          fi
          
          # Silent verification - no file listing or content exposure
          if [ -z "$(find examples -type f)" ]; then
            echo "❌ Examples directory is empty"
            exit 1
          fi

      - name: Clone public deploy repository
        run: |
          echo "📂 Cloning ${{ env.DEPLOY_REPO }}"
          git clone https://$DEPLOY_REPO_TOKEN@github.com/${{ env.DEPLOY_REPO }}.git deploy
          cd deploy
          
          # Create directory structure
          mkdir -p releases/v${{ inputs.version }}
          mkdir -p binaries
          mkdir -p scripts
          mkdir -p examples

      - name: Deploy examples to public repo
        run: |
          cd deploy
          
          # Copy ONLY examples directory content - no source code exposure
          cp -r ../source/examples/* examples/ 2>/dev/null || true
          
          # Create examples index for easy browsing
          cat > examples/README.md << 'EOF'
          # Kolumn Examples
          
          This directory contains comprehensive examples for using Kolumn CLI.
          
          ## Quick Start
          
          ### Basic Project Templates
          - [`project-structures/minimal-project/`](project-structures/minimal-project/) - Simple single-file project
          - [`project-structures/standard-project/`](project-structures/standard-project/) - Multi-file organized project
          - [`project-structures/data-platform-project/`](project-structures/data-platform-project/) - Data platform with governance
          - [`project-structures/enterprise-project/`](project-structures/enterprise-project/) - Complete enterprise setup
          
          ### Configuration Examples
          - [`backends/`](backends/) - Backend configuration examples (SchemaBounce, S3, etc.)
          - [`config/`](config/) - API and application configuration files
          
          ### Demo Files
          - [`demo-step1-baseline.kl`](demo-step1-baseline.kl) - Step 1: Basic table creation
          - [`demo-step2-add-column.kl`](demo-step2-add-column.kl) - Step 2: Schema evolution
          - [`demo-step3-add-pii.kl`](demo-step3-add-pii.kl) - Step 3: Adding PII columns
          - [`demo-step4-complex-evolution.kl`](demo-step4-complex-evolution.kl) - Step 4: Complex changes
          
          ### Enterprise Examples
          - [`enterprise/`](enterprise/) - Enterprise-grade configurations
            - [`governance-lineage-complete.kl`](enterprise/governance-lineage-complete.kl) - Complete governance setup
            - [`sso-rbac-complete.kl`](enterprise/sso-rbac-complete.kl) - SSO and RBAC configuration
            - [`hsm-encryption-advanced.kl`](enterprise/hsm-encryption-advanced.kl) - HSM encryption setup
          
          ### Multi-Provider Examples
          - [`multi-provider-ecommerce.kl`](multi-provider-ecommerce.kl) - E-commerce platform spanning multiple providers
          - [`universal-file-processing.kl`](universal-file-processing.kl) - File processing across providers
          
          ### File Processing Examples
          - [`files/`](files/) - SQL, Python, and configuration files
          - [`sql/`](sql/) - SQL file examples for discovery
          - [`python/`](python/) - Python file examples for discovery
          
          ### Variable Configuration
          - [`variables.klvars`](variables.klvars) - Development variables
          - [`production.klvars`](production.klvars) - Production variables
          - [`staging.klvars`](staging.klvars) - Staging variables
          - [`variables-README.md`](variables-README.md) - Variables documentation
          
          ### Kubernetes and DAGs
          - [`k8s/`](k8s/) - Kubernetes deployment examples
          - [`dags/`](dags/) - Airflow DAG examples
          
          ### Documentation
          - [`DEMO_INSTRUCTIONS.md`](DEMO_INSTRUCTIONS.md) - Step-by-step demo instructions
          - [`FILE_DISCOVERY_README.md`](FILE_DISCOVERY_README.md) - File discovery system documentation
          - [`AUTONOMOUS_COLUMN_PROPAGATION.md`](AUTONOMOUS_COLUMN_PROPAGATION.md) - Advanced column propagation
          
          ## Getting Started
          
          1. **Choose a template** from [`project-structures/`](project-structures/)
          2. **Copy the template** to your local machine
          3. **Customize variables** using the `.klvars` files
          4. **Run Kolumn commands**:
             ```bash
             kolumn init
             kolumn plan
             kolumn apply
             ```
          
          ## Browse Online
          
          You can browse these examples online at: https://github.com/schemabounce/Kolumn-deploy/tree/main/examples
          
          ## Download
          
          Download the complete examples archive:
          ```bash
          curl -L https://github.com/schemabounce/Kolumn-deploy/archive/refs/heads/main.zip -o kolumn-examples.zip
          unzip kolumn-examples.zip
          cd Kolumn-deploy-main/examples
          ```
          EOF
          
          # Create index.html for web browsing
          cat > examples/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Kolumn Examples</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 1200px; margin: 0 auto; padding: 20px; }
                  h1 { color: #D4AF37; border-bottom: 3px solid #D4AF37; }
                  h2 { color: #333; margin-top: 2em; }
                  .category { background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 15px 0; }
                  .example-link { display: inline-block; background: #D4AF37; color: white; padding: 8px 15px; text-decoration: none; border-radius: 4px; margin: 5px; }
                  .example-link:hover { background: #B8941F; }
                  .description { color: #666; font-style: italic; }
              </style>
          </head>
          <body>
              <h1>🚀 Kolumn Examples</h1>
              <p>Comprehensive examples for using Kolumn CLI - the infrastructure-as-code tool for the modern data stack.</p>
              
              <div class="category">
                  <h2>📁 Project Templates</h2>
                  <p class="description">Ready-to-use project structures for different use cases</p>
                  <a href="project-structures/minimal-project/" class="example-link">Minimal Project</a>
                  <a href="project-structures/standard-project/" class="example-link">Standard Project</a>
                  <a href="project-structures/data-platform-project/" class="example-link">Data Platform</a>
                  <a href="project-structures/enterprise-project/" class="example-link">Enterprise</a>
              </div>
              
              <div class="category">
                  <h2>🎯 Demo Files</h2>
                  <p class="description">Step-by-step demo showing Kolumn capabilities</p>
                  <a href="demo-step1-baseline.kl" class="example-link">Step 1: Baseline</a>
                  <a href="demo-step2-add-column.kl" class="example-link">Step 2: Add Column</a>
                  <a href="demo-step3-add-pii.kl" class="example-link">Step 3: Add PII</a>
                  <a href="demo-step4-complex-evolution.kl" class="example-link">Step 4: Complex Evolution</a>
              </div>
              
              <div class="category">
                  <h2>🏢 Enterprise Examples</h2>
                  <p class="description">Enterprise-grade configurations with governance</p>
                  <a href="enterprise/governance-lineage-complete.kl" class="example-link">Governance & Lineage</a>
                  <a href="enterprise/sso-rbac-complete.kl" class="example-link">SSO & RBAC</a>
                  <a href="enterprise/hsm-encryption-advanced.kl" class="example-link">HSM Encryption</a>
              </div>
              
              <div class="category">
                  <h2>🔗 Multi-Provider</h2>
                  <p class="description">Examples spanning multiple data providers</p>
                  <a href="multi-provider-ecommerce.kl" class="example-link">E-commerce Platform</a>
                  <a href="universal-file-processing.kl" class="example-link">Universal File Processing</a>
              </div>
              
              <div class="category">
                  <h2>📋 Configuration</h2>
                  <p class="description">Backend and variable configuration examples</p>
                  <a href="backends/" class="example-link">Backend Configs</a>
                  <a href="config/" class="example-link">API Settings</a>
                  <a href="variables.klvars" class="example-link">Development Variables</a>
                  <a href="production.klvars" class="example-link">Production Variables</a>
              </div>
              
              <div class="category">
                  <h2>📄 Documentation</h2>
                  <p class="description">Detailed documentation and guides</p>
                  <a href="DEMO_INSTRUCTIONS.md" class="example-link">Demo Instructions</a>
                  <a href="FILE_DISCOVERY_README.md" class="example-link">File Discovery Guide</a>
                  <a href="variables-README.md" class="example-link">Variables Guide</a>
              </div>
              
              <p style="margin-top: 3em; text-align: center; color: #666;">
                  <a href="https://github.com/schemabounce/Kolumn-deploy">View on GitHub</a> | 
                  <a href="https://schemabounce.github.io/Kolumn-deploy/">Install Kolumn</a>
              </p>
          </body>
          </html>
          EOF
          
          # Silent verification that examples were copied
          if [ ! -d "examples" ] || [ -z "$(find examples -type f)" ]; then
            echo "❌ Examples deployment failed"
            exit 1
          fi

      - name: Deploy binaries to public repo
        run: |
          VERSION="${{ inputs.version }}"
          cd deploy
          
          echo "📦 Deploying Kolumn v${VERSION} binaries"
          
          # Check what files we have available
          echo "🔍 Available files in parent directory:"
          ls -la ../kolumn-* || echo "No kolumn-* files found"
          
          # Find all kolumn package files
          PACKAGE_FILES=$(find .. -name "kolumn-${VERSION}-*" -type f || echo "")
          
          if [ -z "$PACKAGE_FILES" ]; then
            echo "❌ Error: No package files found for version ${VERSION}"
            echo "🔍 Looking for any kolumn files..."
            find .. -name "kolumn-*" -type f || echo "No kolumn files found at all"
            exit 1
          fi
          
          echo "📁 Found package files:"
          echo "$PACKAGE_FILES"
          
          # Copy release packages to versioned directory
          echo "$PACKAGE_FILES" | while read -r file; do
            if [ -f "$file" ]; then
              echo "📋 Copying: $file"
              cp "$file" "releases/v${VERSION}/"
            fi
          done
          
          # Also copy to latest directory for convenience
          mkdir -p releases/latest
          echo "$PACKAGE_FILES" | while read -r file; do
            if [ -f "$file" ]; then
              cp "$file" "releases/latest/"
            fi
          done
          
          # Verify files were copied
          echo "✅ Files in releases/v${VERSION}/:"
          ls -la "releases/v${VERSION}/" || echo "Directory is empty"
          echo "✅ Files in releases/latest/:"
          ls -la "releases/latest/" || echo "Directory is empty"
          
          # Update version metadata
          cat > releases/latest/version.json << EOF
          {
            "version": "${VERSION}",
            "tag": "${{ inputs.tag }}",
            "released": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "platforms": [
              "linux-amd64", "linux-arm64",
              "darwin-amd64", "darwin-arm64", 
              "windows-amd64", "windows-arm64"
            ]
          }
          EOF
          
          cp releases/latest/version.json releases/v${VERSION}/

      - name: Update install script
        run: |
          cd deploy
          
          # Create/update the install script
          cat > install.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Kolumn Installation Script
          # Usage: curl -fsSL https://schemabounce.github.io/Kolumn-deploy/install.sh | bash
          
          INSTALL_DIR="/usr/local/bin"
          REPO="schemabounce/Kolumn-deploy"
          BASE_URL="https://github.com/${REPO}/releases/latest/download"
          
          # Colors for output
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          BLUE='\033[0;34m'
          NC='\033[0m' # No Color
          
          echo -e "${BLUE}🚀 Installing Kolumn...${NC}"
          
          # Detect OS and architecture
          OS=$(uname -s | tr '[:upper:]' '[:lower:]')
          ARCH=$(uname -m)
          
          case $ARCH in
              x86_64) ARCH="amd64" ;;
              arm64|aarch64) ARCH="arm64" ;;
              *) echo -e "${RED}❌ Unsupported architecture: $ARCH${NC}"; exit 1 ;;
          esac
          
          case $OS in
              linux) ;;
              darwin) ;;
              *) echo -e "${RED}❌ Unsupported OS: $OS${NC}"; exit 1 ;;
          esac
          
          # Get latest version
          echo -e "${YELLOW}📡 Fetching latest version...${NC}"
          VERSION_INFO=$(curl -s "https://schemabounce.github.io/Kolumn-deploy/releases/latest/version.json")
          VERSION=$(echo "$VERSION_INFO" | grep -o '"version": "[^"]*' | cut -d'"' -f4)
          
          if [ -z "$VERSION" ]; then
              echo -e "${RED}❌ Failed to get latest version${NC}"
              exit 1
          fi
          
          echo -e "${GREEN}📦 Latest version: $VERSION${NC}"
          
          # Download and install
          PACKAGE="kolumn-${VERSION}-${OS}-${ARCH}.tar.gz"
          DOWNLOAD_URL="${BASE_URL}/${PACKAGE}"
          
          echo -e "${YELLOW}⬇️  Downloading ${PACKAGE}...${NC}"
          curl -fsSL "$DOWNLOAD_URL" -o "/tmp/${PACKAGE}"
          
          echo -e "${YELLOW}📂 Extracting to ${INSTALL_DIR}...${NC}"
          cd /tmp
          tar -xzf "${PACKAGE}"
          
          # Install binaries
          sudo mv "kolumn-${VERSION}-${OS}-${ARCH}/kolumn" "${INSTALL_DIR}/"
          sudo mv "kolumn-${VERSION}-${OS}-${ARCH}/kolumn-provider-kolumn" "${INSTALL_DIR}/"
          sudo chmod +x "${INSTALL_DIR}/kolumn" "${INSTALL_DIR}/kolumn-provider-kolumn"
          
          # Cleanup
          rm -rf "/tmp/kolumn-${VERSION}-${OS}-${ARCH}" "/tmp/${PACKAGE}"
          
          # Verify installation
          echo -e "${YELLOW}🧪 Verifying installation...${NC}"
          if "${INSTALL_DIR}/kolumn" version >/dev/null 2>&1; then
              echo -e "${GREEN}✅ Kolumn ${VERSION} installed successfully!${NC}"
              echo -e "${BLUE}🎯 Try: kolumn --help${NC}"
          else
              echo -e "${RED}❌ Installation verification failed${NC}"
              exit 1
          fi
          EOF
          
          chmod +x install.sh
          cp install.sh scripts/

      - name: Create GitHub release in public repo
        run: |
          cd deploy
          VERSION="${{ inputs.version }}"
          TAG="${{ inputs.tag }}"
          
          # Create release notes
          cat > release-notes.md << EOF
          # Kolumn ${VERSION}
          
          Infrastructure-as-code tool for the modern data stack with enterprise governance.
          
          ## 🚀 Installation
          
          ### Quick Install (Recommended)
          \`\`\`bash
          curl -fsSL https://schemabounce.github.io/Kolumn-deploy/install.sh | bash
          \`\`\`
          
          ### Manual Download
          Download the appropriate package for your platform:
          - Linux AMD64: [kolumn-${VERSION}-linux-amd64.tar.gz](https://github.com/schemabounce/Kolumn-deploy/releases/download/${TAG}/kolumn-${VERSION}-linux-amd64.tar.gz)
          - Linux ARM64: [kolumn-${VERSION}-linux-arm64.tar.gz](https://github.com/schemabounce/Kolumn-deploy/releases/download/${TAG}/kolumn-${VERSION}-linux-arm64.tar.gz)
          - macOS AMD64: [kolumn-${VERSION}-darwin-amd64.tar.gz](https://github.com/schemabounce/Kolumn-deploy/releases/download/${TAG}/kolumn-${VERSION}-darwin-amd64.tar.gz)
          - macOS ARM64: [kolumn-${VERSION}-darwin-arm64.tar.gz](https://github.com/schemabounce/Kolumn-deploy/releases/download/${TAG}/kolumn-${VERSION}-darwin-arm64.tar.gz)
          - Windows AMD64: [kolumn-${VERSION}-windows-amd64.zip](https://github.com/schemabounce/Kolumn-deploy/releases/download/${TAG}/kolumn-${VERSION}-windows-amd64.zip)
          - Windows ARM64: [kolumn-${VERSION}-windows-arm64.zip](https://github.com/schemabounce/Kolumn-deploy/releases/download/${TAG}/kolumn-${VERSION}-windows-arm64.zip)
          
          ## ✨ What's Included
          - **kolumn**: Main CLI binary
          - **kolumn-provider-kolumn**: Governance provider binary
          - Multi-platform support (Linux, macOS, Windows)
          - Both AMD64 and ARM64 architectures
          - **📚 Complete examples directory** with project templates, demos, and documentation
          
          ## 🎯 Getting Started
          \`\`\`bash
          # Verify installation
          kolumn version
          
          # Browse examples online or download them
          curl -L https://github.com/schemabounce/Kolumn-deploy/archive/refs/heads/main.zip -o kolumn-examples.zip
          unzip kolumn-examples.zip
          cd Kolumn-deploy-main/examples
          
          # Create a new project from template
          cp -r project-structures/minimal-project/ my-project
          cd my-project
          
          # Initialize and apply
          kolumn init
          kolumn plan
          kolumn apply
          \`\`\`
          
          ## 📚 Examples & Documentation
          - **🌐 Browse Examples**: [https://github.com/schemabounce/Kolumn-deploy/tree/main/examples](https://github.com/schemabounce/Kolumn-deploy/tree/main/examples)
          - **📁 Project Templates**: Ready-to-use project structures (minimal, standard, data-platform, enterprise)
          - **🎯 Step-by-Step Demos**: Progressive examples showing Kolumn capabilities
          - **🏢 Enterprise Examples**: Governance, RBAC, encryption, and compliance configurations
          - **🔗 Multi-Provider**: Examples spanning databases, streaming, ETL, and orchestration
          - **📋 Configuration**: Backend configs, variables, and deployment patterns
          
          ## 🔗 Links
          - 📖 [Documentation](https://schemabounce.github.io/Kolumn-deploy)
          - 📚 [Examples](https://github.com/schemabounce/Kolumn-deploy/tree/main/examples)
          - 💬 [Support](https://github.com/schemabounce/Kolumn-deploy/issues)
          EOF

      - name: Commit and push to deploy repo
        run: |
          cd deploy
          
          # Stage all changes
          git add .
          
          # Commit if there are changes
          if [ -n "$(git status --porcelain)" ]; then
              git commit -m "🚀 Deploy Kolumn ${{ inputs.version }}
          
          - Added binaries for all platforms (Linux, macOS, Windows)
          - Updated install script
          - Updated version metadata
          - Deployed examples directory from source repository
          - Added examples README and HTML index for easy browsing
          - Ready for GitHub release
          
          📚 Examples now publicly available at:
          - https://github.com/schemabounce/Kolumn-deploy/tree/main/examples
          - Project templates, demos, enterprise configs, and documentation"
              
              git push origin main
              echo "✅ Changes pushed to deploy repository"
          else
              echo "ℹ️  No changes to commit"
          fi

      - name: Verify release files before GitHub release
        run: |
          echo "🔍 Verifying files for GitHub release..."
          cd deploy
          
          VERSION="${{ inputs.version }}"
          RELEASE_FILES="releases/v${VERSION}/kolumn-${VERSION}-*"
          
          echo "📁 Looking for files matching: $RELEASE_FILES"
          ls -la $RELEASE_FILES || echo "❌ No files match the pattern"
          
          if ls $RELEASE_FILES 1> /dev/null 2>&1; then
            echo "✅ Release files found!"
            ls -la $RELEASE_FILES
          else
            echo "❌ Error: No release files found for GitHub release"
            echo "🔍 Available files in releases directory:"
            find releases -type f || echo "No files in releases directory"
            exit 1
          fi

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ env.DEPLOY_REPO_TOKEN }}
          tag_name: ${{ inputs.tag }}
          name: "Kolumn ${{ inputs.version }}"
          body_path: deploy/release-notes.md
          files: |
            deploy/releases/v${{ inputs.version }}/kolumn-${{ inputs.version }}-*
          draft: false
          prerelease: ${{ contains(inputs.version, 'dev') }}
          fail_on_unmatched_files: false
          generate_release_notes: false

      - name: Deployment summary
        run: |
          echo "🎉 Successfully deployed Kolumn ${{ inputs.version }} to public repository!"
          echo "📦 Release: https://github.com/${{ env.DEPLOY_REPO }}/releases/tag/${{ inputs.tag }}"
          echo "🔗 Install: curl -fsSL https://schemabounce.github.io/Kolumn-deploy/install.sh | bash"
          echo "📚 Examples: https://github.com/${{ env.DEPLOY_REPO }}/tree/main/examples"
          echo ""
          echo "✅ Deployment includes:"
          echo "   • Multi-platform binaries (Linux, macOS, Windows)"
          echo "   • Updated install script and metadata"  
          echo "   • Examples directory for getting started"