name: Deploy to Kolumn-deploy

# This workflow should be copied to the schemabounce/Kolumn-deploy repository
# It handles the actual deployment to the public Kolumn-deploy repository
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., 1.2.3)'
        required: true
        type: string
      tag:
        description: 'Git tag (e.g., v1.2.3)'
        required: true
        type: string
      source_repo:
        description: 'Source repository'
        required: true
        type: string
      run_id:
        description: 'Source workflow run ID'
        required: true
        type: string

env:
  DEPLOY_REPO: 'schemabounce/Kolumn-deploy'
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  deploy:
    name: Deploy Binaries
    runs-on: ubuntu-latest
    steps:
      - name: Download release packages from private repo
        run: |
          echo "🔽 Downloading release packages from ${{ inputs.source_repo }} run ${{ inputs.run_id }}"
          
          # Download artifacts using GitHub API
          curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -o release-packages.zip \
            "https://api.github.com/repos/${{ inputs.source_repo }}/actions/runs/${{ inputs.run_id }}/artifacts/kolumn-release-packages/zip"
          
          # Extract packages
          unzip release-packages.zip
          ls -la

      - name: Setup deployment environment
        run: |
          git config --global user.name "Kolumn Release Bot"
          git config --global user.email "bot@kolumn.com"

      - name: Clone public deploy repository
        run: |
          echo "📂 Cloning ${{ env.DEPLOY_REPO }}"
          git clone https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ env.DEPLOY_REPO }}.git deploy
          cd deploy
          
          # Create directory structure
          mkdir -p releases/v${{ inputs.version }}
          mkdir -p binaries
          mkdir -p scripts

      - name: Deploy binaries to public repo
        run: |
          VERSION="${{ inputs.version }}"
          cd deploy
          
          echo "📦 Deploying Kolumn v${VERSION} binaries"
          
          # Copy release packages to versioned directory
          cp ../kolumn-${VERSION}-*.* releases/v${VERSION}/
          
          # Also copy to latest directory for convenience
          mkdir -p releases/latest
          cp ../kolumn-${VERSION}-*.* releases/latest/
          
          # Update version metadata
          cat > releases/latest/version.json << EOF
          {
            "version": "${VERSION}",
            "tag": "${{ inputs.tag }}",
            "released": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "platforms": [
              "linux-amd64", "linux-arm64",
              "darwin-amd64", "darwin-arm64", 
              "windows-amd64", "windows-arm64"
            ]
          }
          EOF
          
          cp releases/latest/version.json releases/v${VERSION}/

      - name: Update install script
        run: |
          cd deploy
          
          # Create/update the install script
          cat > install.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Kolumn Installation Script
          # Usage: curl -fsSL https://schemabounce.github.io/Kolumn-deploy/install.sh | bash
          
          INSTALL_DIR="/usr/local/bin"
          REPO="schemabounce/Kolumn-deploy"
          BASE_URL="https://github.com/${REPO}/releases/latest/download"
          
          # Colors for output
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          BLUE='\033[0;34m'
          NC='\033[0m' # No Color
          
          echo -e "${BLUE}🚀 Installing Kolumn...${NC}"
          
          # Detect OS and architecture
          OS=$(uname -s | tr '[:upper:]' '[:lower:]')
          ARCH=$(uname -m)
          
          case $ARCH in
              x86_64) ARCH="amd64" ;;
              arm64|aarch64) ARCH="arm64" ;;
              *) echo -e "${RED}❌ Unsupported architecture: $ARCH${NC}"; exit 1 ;;
          esac
          
          case $OS in
              linux) ;;
              darwin) ;;
              *) echo -e "${RED}❌ Unsupported OS: $OS${NC}"; exit 1 ;;
          esac
          
          # Get latest version
          echo -e "${YELLOW}📡 Fetching latest version...${NC}"
          VERSION_INFO=$(curl -s "https://schemabounce.github.io/Kolumn-deploy/releases/latest/version.json")
          VERSION=$(echo "$VERSION_INFO" | grep -o '"version": "[^"]*' | cut -d'"' -f4)
          
          if [ -z "$VERSION" ]; then
              echo -e "${RED}❌ Failed to get latest version${NC}"
              exit 1
          fi
          
          echo -e "${GREEN}📦 Latest version: $VERSION${NC}"
          
          # Download and install
          PACKAGE="kolumn-${VERSION}-${OS}-${ARCH}.tar.gz"
          DOWNLOAD_URL="${BASE_URL}/${PACKAGE}"
          
          echo -e "${YELLOW}⬇️  Downloading ${PACKAGE}...${NC}"
          curl -fsSL "$DOWNLOAD_URL" -o "/tmp/${PACKAGE}"
          
          echo -e "${YELLOW}📂 Extracting to ${INSTALL_DIR}...${NC}"
          cd /tmp
          tar -xzf "${PACKAGE}"
          
          # Install binaries
          sudo mv "kolumn-${VERSION}-${OS}-${ARCH}/kolumn" "${INSTALL_DIR}/"
          sudo mv "kolumn-${VERSION}-${OS}-${ARCH}/kolumn-provider-kolumn" "${INSTALL_DIR}/"
          sudo chmod +x "${INSTALL_DIR}/kolumn" "${INSTALL_DIR}/kolumn-provider-kolumn"
          
          # Cleanup
          rm -rf "/tmp/kolumn-${VERSION}-${OS}-${ARCH}" "/tmp/${PACKAGE}"
          
          # Verify installation
          echo -e "${YELLOW}🧪 Verifying installation...${NC}"
          if "${INSTALL_DIR}/kolumn" version >/dev/null 2>&1; then
              echo -e "${GREEN}✅ Kolumn ${VERSION} installed successfully!${NC}"
              echo -e "${BLUE}🎯 Try: kolumn --help${NC}"
          else
              echo -e "${RED}❌ Installation verification failed${NC}"
              exit 1
          fi
          EOF
          
          chmod +x install.sh
          cp install.sh scripts/

      - name: Create GitHub release in public repo
        run: |
          cd deploy
          VERSION="${{ inputs.version }}"
          TAG="${{ inputs.tag }}"
          
          # Create release notes
          cat > release-notes.md << EOF
          # Kolumn ${VERSION}
          
          Infrastructure-as-code tool for the modern data stack with enterprise governance.
          
          ## 🚀 Installation
          
          ### Quick Install (Recommended)
          \`\`\`bash
          curl -fsSL https://schemabounce.github.io/Kolumn-deploy/install.sh | bash
          \`\`\`
          
          ### Manual Download
          Download the appropriate package for your platform:
          - Linux AMD64: [kolumn-${VERSION}-linux-amd64.tar.gz](https://github.com/schemabounce/Kolumn-deploy/releases/download/${TAG}/kolumn-${VERSION}-linux-amd64.tar.gz)
          - Linux ARM64: [kolumn-${VERSION}-linux-arm64.tar.gz](https://github.com/schemabounce/Kolumn-deploy/releases/download/${TAG}/kolumn-${VERSION}-linux-arm64.tar.gz)
          - macOS AMD64: [kolumn-${VERSION}-darwin-amd64.tar.gz](https://github.com/schemabounce/Kolumn-deploy/releases/download/${TAG}/kolumn-${VERSION}-darwin-amd64.tar.gz)
          - macOS ARM64: [kolumn-${VERSION}-darwin-arm64.tar.gz](https://github.com/schemabounce/Kolumn-deploy/releases/download/${TAG}/kolumn-${VERSION}-darwin-arm64.tar.gz)
          - Windows AMD64: [kolumn-${VERSION}-windows-amd64.zip](https://github.com/schemabounce/Kolumn-deploy/releases/download/${TAG}/kolumn-${VERSION}-windows-amd64.zip)
          - Windows ARM64: [kolumn-${VERSION}-windows-arm64.zip](https://github.com/schemabounce/Kolumn-deploy/releases/download/${TAG}/kolumn-${VERSION}-windows-arm64.zip)
          
          ## ✨ What's Included
          - **kolumn**: Main CLI binary
          - **kolumn-provider-kolumn**: Governance provider binary
          - Multi-platform support (Linux, macOS, Windows)
          - Both AMD64 and ARM64 architectures
          
          ## 🎯 Getting Started
          \`\`\`bash
          # Verify installation
          kolumn version
          
          # Create a new project
          kolumn init
          
          # See available commands
          kolumn --help
          \`\`\`
          
          ## 🔗 Links
          - 📖 [Documentation](https://schemabounce.github.io/Kolumn-deploy)
          - 💬 [Support](https://github.com/schemabounce/Kolumn-deploy/issues)
          EOF

      - name: Commit and push to deploy repo
        run: |
          cd deploy
          
          # Stage all changes
          git add .
          
          # Commit if there are changes
          if [ -n "$(git status --porcelain)" ]; then
              git commit -m "🚀 Deploy Kolumn ${{ inputs.version }}
          
          - Added binaries for all platforms (Linux, macOS, Windows)
          - Updated install script
          - Updated version metadata
          - Ready for GitHub release"
              
              git push origin main
              echo "✅ Changes pushed to deploy repository"
          else
              echo "ℹ️  No changes to commit"
          fi

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          repository: ${{ env.DEPLOY_REPO }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ inputs.tag }}
          name: "Kolumn ${{ inputs.version }}"
          body_path: deploy/release-notes.md
          files: |
            deploy/releases/v${{ inputs.version }}/kolumn-${{ inputs.version }}-*
          draft: false
          prerelease: ${{ contains(inputs.version, 'dev') }}

      - name: Deployment summary
        run: |
          echo "🎉 Successfully deployed Kolumn ${{ inputs.version }} to public repository!"
          echo "📦 Release: https://github.com/${{ env.DEPLOY_REPO }}/releases/tag/${{ inputs.tag }}"
          echo "🔗 Install: curl -fsSL https://schemabounce.github.io/Kolumn-deploy/install.sh | bash"